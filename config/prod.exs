use Mix.Config

# For production, don't forget to configure the url host
# to something meaningful, Phoenix uses this information
# when generating URLs.
#
# Note we also include the path to a cache manifest
# containing the digested version of static files. This
# manifest is generated by the `mix phx.digest` task,
# which you should run after static files are built and
# before starting your production server.
config :e2quizzical, E2QuizzicalWeb.Endpoint,
  url: [host: "docks.tcwlogistics.com", port: 80],
  cache_static_manifest: "priv/static/cache_manifest.json"

config :e2quizzical,
  environment: :production,
  send_email_from: "ali@sightsource.net",
  app_root_url: "https://app.sightsource.net",
  app_name: "App Name"

# Do not print debug messages in production
config :logger, level: :info

config :arc,
  storage: Arc.Storage.S3,
  bucket: "e2quizzicaldocuments"

config :ex_aws,
  access_key_id: [{:system, "AWS_ACCESS_KEY_ID"}, :instance_role],
  secret_access_key: [{:system, "AWS_SECRET_ACCESS_KEY"}, :instance_role]

#email
config :e2quizzical, E2Quizzical.Mailer,
  adapter: Bamboo.SMTPAdapter,
  server: "email-smtp.us-east-1.amazonaws.com",
  port: 587,
  username: [{:system, "AWS_SES_USERNAME"}, :instance_role],
  password: [{:system, "AWS_SES_PASSWORD"}, :instance_role],
  tls: :always,
  # auth: :always,
  # ssl: false,
  retries: 1

config :logger,
  level: :warn,
  format: "$date $time [$level] $message\n",
  backends: [{LoggerFileBackend, :file_log}, :console]

config :logger, :file_log,
  path: "/var/log/tcw/tcw.log",
  format: "$date $time [$level] $message\n",
  level: :warn

# Quantum Job Scheduler on for production
config :e2quizzical, E2Quizzical.Scheduler,
jobs: [
  # every 2 minutes
  # {"*/2 * * *", {E2Quizzical.DockStatus, :assess_dock_threshold_alerts, []}}
]

# ## SSL Support
#
# To get SSL working, you will need to add the `https` key
# to the previous section and set your `:url` port to 443:
#
#     config :e2quizzical, E2QuizzicalWeb.Endpoint,
#       ...
#       url: [host: "example.com", port: 443],
#       https: [
#         port: 443,
#         cipher_suite: :strong,
#         keyfile: System.get_env("SOME_APP_SSL_KEY_PATH"),
#         certfile: System.get_env("SOME_APP_SSL_CERT_PATH"),
#         transport_options: [socket_opts: [:inet6]]
#       ]
#
# The `cipher_suite` is set to `:strong` to support only the
# latest and more secure SSL ciphers. This means old browsers
# and clients may not be supported. You can set it to
# `:compatible` for wider support.
#
# `:keyfile` and `:certfile` expect an absolute path to the key
# and cert in disk or a relative path inside priv, for example
# "priv/ssl/server.key". For all supported SSL configuration
# options, see https://hexdocs.pm/plug/Plug.SSL.html#configure/1
#
# We also recommend setting `force_ssl` in your endpoint, ensuring
# no data is ever sent via http, always redirecting to https:
#
#     config :e2quizzical, E2QuizzicalWeb.Endpoint,
#       force_ssl: [hsts: true]
#
# Check `Plug.SSL` for all available options in `force_ssl`.

# Finally import the config/prod.secret.exs which loads secrets
# and configuration from environment variables.
import_config "prod.secret.exs"
